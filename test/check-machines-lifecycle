#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2021 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import os
import sys

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))

from machineslib import VirtualMachinesCase  # noqa
from testlib import nondestructive, skipImage, test_main, wait  # noqa

distrosWithoutSnapshot = ["centos-8-stream", "rhel-8-6", "rhel-8-7", "rhel-8-8", "rhel-8-9"]


@nondestructive
class TestMachinesLifecycle(VirtualMachinesCase):

    def testBasic(self):
        self._testBasic(run_pixel_tests=True)

    def createUser(self, user_group):
        user_name = f"test_{user_group if user_group else 'none'}_user"
        self.machine.execute(f"useradd{' -G ' + user_group if user_group else '' } {user_name}")
        self.machine.execute(f"echo '{user_name}:foobar' | chpasswd")
        # user libvirtd instance tends to SIGABRT with "Failed to find user record for uid .." on shutdown during cleanup
        # so make sure that there are no leftover user processes that bleed into the next test
        self.addCleanup(self.machine.execute, f"pkill -u {user_name} || true; while pgrep -u {user_name}; do sleep 0.5; done")
        # HACK: ...but it still tends to crash during shutdown (without known stack trace)
        self.allow_journal_messages('Process .*libvirtd.* of user 10.* dumped core.*')

        return user_name

    def testBasicNonrootUserUnprivileged(self):
        user = self.createUser(user_group=None)
        self._testBasic(user, False, True)

    # FIXME remove this skipImage
    @skipImage('Fails with Rejected send message, 1 matched rules; type="method_call"',
               "rhel-8-6", "ubuntu-stable", "debian-testing", "debian-stable", "centos-8-stream")
    def testBasicLibvirtUserUnprivileged(self):
        user = self.createUser(user_group='libvirt')
        self._testBasic(user, False)

    def testBasicAdminUser(self):
        # The group in debian based distro should be sudo
        if "ubuntu" in self.machine.image or "debian" in self.machine.image:
            user_group = "sudo"
        else:
            user_group = "wheel"
        user = self.createUser(user_group=user_group)

        # Check NON-PRIVILEGED user won't see any VMs even though they are in wheel group
        self._testBasic(user, False, True)
        self.machine.execute("virsh destroy subVmTest1; virsh undefine subVmTest1")
        # Check wheel group PRIVILEGED user will see VMs and can do operations on them
        self._testBasic(user, True, False)

    def _testBasic(self, user=None, superuser=True, expect_empty_list=False, run_pixel_tests=False):
        b = self.browser
        m = self.machine

        args = self.createVm("subVmTest1")

        self.login_and_go("/machines", user=user, superuser=superuser)

        if expect_empty_list:
            with b.wait_timeout(20):
                b.wait_in_text("#virtual-machines-listing .pf-c-empty-state", "No VM is running")
                return
        self.waitPageInit()
        self.waitVmRow("subVmTest1")

        def checkConnectionDescription(button: str, text: str):
            b.click(button)
            b.wait_visible("#create-vm-dialog")
            b.click('#create-vm-dialog button[aria-label="more info"]')
            b.wait_in_text("#popover-machines-connection-selector-popover-body", text)

            # Close the connection description dialog
            b.click("div[aria-describedby=popover-machines-connection-selector-popover-body] button[aria-label=Close]")
            b.wait_not_present("#popover-machines-connection-selector-popover-body")
            # Close the VM creation dialog
            b.click('#create-vm-dialog button:contains("Cancel")')
            b.wait_not_present("#create-vm-dialog")

        def checkNeedsShutdownLabel(message):
            b.wait_not_present("#vm-subVmTest1-needs-shutdown")
            m.execute("virt-xml subVmTest1 --add-device --watchdog action=reset --update")
            m.execute("virt-xml subVmTest1 --edit --watchdog action=pause")
            b.wait_visible("#vm-subVmTest1-needs-shutdown")
            b.click("#vm-subVmTest1-needs-shutdown")
            b.wait_in_text(".pf-c-popover__body", message)
            m.execute("virt-xml subVmTest1 --remove-device --watchdog 1 --update")

        checkConnectionDescription("#import-existing-vm", "Ideal for server VMs")
        checkConnectionDescription("#create-new-vm", "Good choice for desktop virtualization")
        checkNeedsShutdownLabel("Watchdog")

        b.wait_in_text("#vm-subVmTest1-system-state", "Running")
        self.goToVmPage("subVmTest1")
        if run_pixel_tests:
            b.assert_pixels("#vm-details", "vm-details", ignore=[
                ".memory-usage-chart",
                "#vm-subVmTest1-disks .pf-c-card__body",
                "#vm-subVmTest1-networks .pf-c-card__body"
                ])
        b.wait_in_text("#vm-subVmTest1-vcpus-count", "1")

        b.wait_in_text("#vm-subVmTest1-boot-order", "disk,network")
        emulated_machine = b.text("#vm-subVmTest1-emulated-machine")
        self.assertTrue(len(emulated_machine) > 0)  # emulated machine varies across test machines

        # switch to and check Usage
        b.click("#vm-subVmTest1-usage")
        b.wait_in_text(".memory-usage-chart .pf-c-progress__status > .pf-c-progress__measure", "128 MiB")
        b.wait_not_in_text(".memory-usage-chart .pf-c-progress__status > .pf-c-progress__measure", "0 /")
        usage = b.text(".memory-usage-chart .pf-c-progress__status > .pf-c-progress__measure").split("/ 128 MiB")[0]
        wait(lambda: float(usage) > 0.0, delay=3)

        b.wait_in_text(".vcpu-usage-chart .pf-c-progress__status > .pf-c-progress__measure", "1 vCPU")
        usage = b.text(".vcpu-usage-chart .pf-c-progress__status > .pf-c-progress__measure").split("% of 1 vCPU")[0]
        # CPU usage cannot be nonzero with blank image, so just ensure it's a percentage
        wait(lambda: float(usage) <= 100.0, delay=3)

        # suspend/resume
        m.execute("virsh suspend subVmTest1")
        b.wait_in_text("#vm-subVmTest1-system-state", "Paused")
        # resume sometimes fails with "unable to execute QEMU command 'cont': Resetting the Virtual Machine is required"
        m.execute('virsh resume subVmTest1 || { virsh destroy subVmTest1; virsh start subVmTest1; }')
        b.wait_in_text("#vm-subVmTest1-system-state", "Running")

        # Wait for the system to completely start
        wait(lambda: "login as 'cirros' user." in self.machine.execute(f"cat {args['logfile']}"), delay=3)

        # Send Non-Maskable Interrupt (no change in VM state is expected)
        self.performAction("subVmTest1", "sendNMI")

        b.wait(lambda: "NMI received" in self.machine.execute(f"cat {args['logfile']}"))

        # pause
        self.performAction("subVmTest1", "pause")
        # check removing button of disk and network interface when the VM is paused
        b.wait_visible("#vm-subVmTest1-disks-vda-action-kebab")
        b.click("#vm-subVmTest1-disks-vda-action-kebab button")
        b.wait_visible("#delete-vm-subVmTest1-disks-vda a[aria-disabled=true]")
        b.wait_visible("#delete-vm-subVmTest1-iface-1:disabled")

        # resume
        self.performAction("subVmTest1", "resume")

        # reboot
        self.machine.execute(f"echo '' > {args['logfile']}")
        self.performAction("subVmTest1", "reboot")
        wait(lambda: "reboot: Power down" in self.machine.execute(f"cat {args['logfile']}"), delay=3)
        b.wait_in_text("#vm-subVmTest1-system-state", "Running")

        # force reboot
        self.machine.execute(f"echo '' > {args['logfile']}")
        self.performAction("subVmTest1", "forceReboot")
        wait(lambda: "Initializing cgroup subsys" in self.machine.execute(f"cat {args['logfile']}"), delay=3)
        b.wait_in_text("#vm-subVmTest1-system-state", "Running")

        # the shut off button beside the VM name
        wait(lambda: "login as 'cirros' user." in self.machine.execute(f"cat {args['logfile']}"), delay=3)
        b.click("#vm-subVmTest1-system-shutdown-button")
        b.wait_in_text("#vm-subVmTest1-system-state", "Shut off")
        b.wait_visible("#vm-subVmTest1-system-run")

        # the shut off button in the extended operation list
        self.machine.execute(f"echo '' > {args['logfile']}")
        b.click("#vm-subVmTest1-system-run")
        b.wait_in_text("#vm-subVmTest1-system-state", "Running")
        wait(lambda: "login as 'cirros' user." in self.machine.execute(f"cat {args['logfile']}"), delay=3)
        self.performAction("subVmTest1", "off")

        # force shut off
        b.click("#vm-subVmTest1-system-run")
        b.wait_in_text("#vm-subVmTest1-system-state", "Running")
        self.performAction("subVmTest1", "forceOff")

        # continue shut off validation - usage should drop to zero
        b.wait_in_text(".memory-usage-chart .pf-c-progress__status > .pf-c-progress__measure", "0 /")
        b.wait_in_text(".vcpu-usage-chart .pf-c-progress__status > .pf-c-progress__measure", "0%")

        # shut off of a transient VM will redirect us to the main page
        m.execute("virsh dumpxml subVmTest1 > /tmp/subVmTest1.xml")
        m.execute("virsh start {0}; virsh undefine {0}".format("subVmTest1"))
        b.wait_visible("div[data-vm-transient=\"true\"]")
        self.performAction("subVmTest1", "forceOff", checkExpectedState=False)
        b.wait_in_text("#virtual-machines-listing .pf-c-empty-state", "No VM is running")
        m.execute("virsh define --file /tmp/subVmTest1.xml")

        # start another one, should appear automatically
        self.createVm("subVmTest2")
        b.wait_in_text("#vm-subVmTest2-system-state", "Running")
        self.goToVmPage("subVmTest2")
        b.wait_in_text("#vm-subVmTest2-vcpus-count", "1")
        b.wait_in_text("#vm-subVmTest2-boot-order", "disk,network")

        self.goToMainPage()
        self.waitVmRow("subVmTest1")
        self.waitVmRow("subVmTest2")

        # stop second VM, event handling should still work
        self.performAction("subVmTest2", "forceOff")

        b.click("#vm-subVmTest2-system-run")

        b.set_input_text("#text-search", "subVmTest2")
        self.waitVmRow("subVmTest2")
        self.waitVmRow("subVmTest1", "system", False)

        # Check VM search is case insensitive
        b.set_input_text("#text-search", "SuBvMtEsT2")
        self.waitVmRow("subVmTest2")
        self.waitVmRow("subVmTest1", "system", False)

        b.select_PF4("#vm-state-select-toggle", "Running")
        self.waitVmRow("subVmTest1", "system", False)
        self.waitVmRow("subVmTest2")

        b.set_input_text("#text-search", "")
        self.waitVmRow("subVmTest1", "system", False)
        self.waitVmRow("subVmTest2")

        b.select_PF4("#vm-state-select-toggle", "Shut off")
        self.waitVmRow("subVmTest1")
        self.waitVmRow("subVmTest2", "system", False)

        b.select_PF4("#vm-state-select-toggle", "All")
        self.waitVmRow("subVmTest1")
        self.waitVmRow("subVmTest2")

        # Check correctness of the toast notifications list
        # We 'll create errors by starting to start domains when the default network in inactive
        self.createVm("subVmTest3")
        m.execute("virsh destroy subVmTest2; virsh destroy subVmTest3; virsh net-destroy default")

        def tryRunDomain(index, name, connection):
            self.waitVmRow(name)

            b.click(f"#vm-{name}-{connection}-run")

        # Try to run subVmTest1 - it will fail because of inactive default network
        tryRunDomain(1, 'subVmTest1', 'system')
        b.click('#vm-subVmTest1-system-state button:contains("view more")')
        b.wait_in_text(".pf-c-popover", "VM subVmTest1 failed to start")
        b.click('#vm-subVmTest1-system-state button[aria-label=Close]')

        # Try to run subVmTest2
        tryRunDomain(2, 'subVmTest2', 'system')
        b.click('#vm-subVmTest2-system-state button:contains("view more")')
        b.wait_in_text(".pf-c-popover", "VM subVmTest2 failed to start")
        b.click('#vm-subVmTest2-system-state button[aria-label=Close]')

    def testCloneSessionConnection(self):
        self.testClone(connectionName='session')

    def testClone(self, connectionName='system'):
        b = self.browser

        self.run_admin("mkdir /tmp/vmdir", connectionName)
        self.addCleanup(self.run_admin, "rm -rf /tmp/vmdir/", connectionName)

        self.login_and_go("/machines")
        self.waitPageInit()

        self.createVm("subVmTest1", running=False, connection=connectionName)

        self.waitVmRow("subVmTest1", connectionName=connectionName)

        self.performAction("subVmTest1", "clone", connectionName=connectionName)

        b.wait_text(".pf-c-modal-box__title-text", "Create a clone VM based on subVmTest1")
        b.click("footer button.pf-m-primary")
        b.wait_not_present(".pf-c-modal-box")
        self.waitVmRow("subVmTest1-clone", connectionName=connectionName)

    def testRename(self):
        b = self.browser

        self.createVm("old", running=False)

        self.login_and_go("/machines")

        self.waitPageInit()

        self.performAction("old", "rename")

        b.set_input_text("#rename-dialog-new-name", "new")
        b.click("#rename-dialog-confirm")
        self.waitVmRow("new")
        self.waitVmRow("old", "system", False)

        # Rename to itself and expect error
        self.performAction("new", "rename")

        b.set_input_text("#rename-dialog-new-name", "new")
        b.click("#rename-dialog-confirm")
        b.wait_in_text(".pf-c-modal-box__body .pf-c-alert.pf-m-danger", "Can't rename domain to itself")

        self.goToVmPage("new")
        self.performAction("new", "rename")

        b.set_input_text("#rename-dialog-new-name", "test%")
        b.click("#rename-dialog-confirm")
        b.wait(lambda: "vm?name=test%25&connection=system" in b.eval_js("window.location.href"))
        b.wait_text("h2.vm-name", "test%")
        b.wait_not_present("#navbar-oops")

    def testDelete(self):
        b = self.browser
        m = self.machine

        name = "subVmTest1"
        img2 = f"/var/lib/libvirt/images/{name}-2.img"

        args = self.createVm(name, graphics='vnc')

        self.login_and_go("/machines")
        self.waitPageInit()
        self.waitVmRow(name)

        m.execute(f"test -f {img2}")

        self.goToVmPage("subVmTest1")

        def addDisk(volName, poolName, vmName='subVmTest1'):
            # Virsh does not offer some option to create disks of type volume
            # We have to do this from cockpit UI
            b.click(f"#vm-{vmName}-disks-adddisk")  # button
            b.wait_visible(f"#vm-{vmName}-disks-adddisk-dialog-modal-window")
            b.wait_visible("label:contains(Create new)")  # radio button label in the modal dialog

            b.select_from_dropdown(f"#vm-{vmName}-disks-adddisk-new-select-pool", poolName)
            b.set_input_text(f"#vm-{vmName}-disks-adddisk-new-name", volName)
            b.set_input_text(f"#vm-{vmName}-disks-adddisk-new-size", "10")
            b.select_from_dropdown(f"#vm-{vmName}-disks-adddisk-new-unit", "MiB")
            b.click(f"#vm-{vmName}-disks-adddisk-permanent")

            b.click(f"#vm-{vmName}-disks-adddisk-dialog-add")
            with b.wait_timeout(30):
                b.wait_not_present(f"#vm-{vmName}-disks-adddisk-dialog-modal-window")

            b.wait_visible(f"#vm-{vmName}-disks-vdb-source-volume")
            b.wait_visible(f"#vm-{vmName}-disks-vdb-source-pool")

        secondDiskVolName = "mydisk"
        poolName = "images"
        secondDiskPoolPath = "/var/lib/libvirt/images/"

        addDisk(secondDiskVolName, poolName)

        self.performAction(name, "delete")

        b.wait_visible(f"#vm-{name}-delete-modal-dialog .pf-c-modal-box__body:contains(The VM {name} is running)")
        b.wait_visible(f"#vm-{name}-delete-modal-dialog ul li:first-child .disk-source-file:contains({img2})")
        # virsh attach-disk does not create disks of type volume
        b.wait_visible(f"#vm-{name}-delete-modal-dialog .disk-source-volume:contains({secondDiskVolName})")
        b.wait_visible(f"#vm-{name}-delete-modal-dialog .disk-source-pool:contains({poolName})")
        b.assert_pixels(f"#vm-{name}-delete-modal-dialog", "vm-delete-dialog", skip_layouts=["rtl"])
        b.click(f"#vm-{name}-delete-modal-dialog button:contains(Delete)")
        b.wait_not_present(f"#vm-{name}-delete-modal-dialog")

        self.waitVmRow(name, "system", False)

        m.execute(f"while test -f {img2}; do sleep 1; done")
        m.execute(f"while test -f {secondDiskPoolPath + secondDiskVolName}; do sleep 1; done")

        self.assertNotIn(name, m.execute("virsh list --all --name"))

        # Try to delete a paused VM
        name = "paused-test-vm"
        args = self.createVm(name)

        self.goToVmPage(name)

        # Make sure that the VM booted normally before attempting to suspend it
        wait(lambda: "login as 'cirros' user" in self.machine.execute(f"cat {args['logfile']}"), delay=3)

        self.machine.execute(f"virsh -c qemu:///system suspend {name}")
        b.wait_in_text(f"#vm-{name}-system-state", "Paused")
        self.performAction(name, "delete")
        b.click(f"#vm-{name}-delete-modal-dialog button:contains(Delete)")
        self.waitVmRow(name, 'system', False)

        if m.image not in distrosWithoutSnapshot:
            # Delete a VM with snapshots and ensure the qcow2 image overlays get also cleaned up
            name = "vm-with-snapshots"
            self.createVm(name, running=False)

            m.execute(f"virsh snapshot-create-as --domain {name} --name snapshotA --description 'Description of snapshotA'")

            qemu_img_info = m.execute(f"qemu-img info /var/lib/libvirt/images/{name}-2.img")
            self.assertIn("snapshotA", qemu_img_info)

            # snapshots events not available yet: https://gitlab.com/libvirt/libvirt/-/issues/44
            b.reload()
            b.enter_page('/machines')
            self.goToVmPage(name)
            b.wait_in_text(f"#vm-{name}-snapshot-0-name", "snapshotA")

            self.performAction(name, "delete")

            # Unselect the disks - we don't want to delete them
            b.click("#vm-vm-with-snapshots-delete-modal-dialog ul li:first-child input")
            b.click("#vm-vm-with-snapshots-delete-modal-dialog button:contains(Delete)")
            b.wait_not_present(f"#vm-{name}-delete-modal-dialog")

            qemu_img_info = m.execute(f"qemu-img info /var/lib/libvirt/images/{name}-2.img")
            self.assertNotIn("snapshotA", qemu_img_info)

        # Try to delete a VM and keep its volume
        name = "vm-keep-vol"
        args = self.createVm(name)
        self.waitVmRow(name)
        wait(lambda: name in m.execute("virsh list --all --name"))

        self.performAction(name, "delete")
        b.set_checked(f"#vm-{name}-delete-modal-dialog input[type=checkbox]", False)
        b.click(f"#vm-{name}-delete-modal-dialog button:contains(Delete)")

        self.waitVmRow(name, present=False)
        wait(lambda: name not in m.execute("virsh list --all --name"))
        m.execute(f"test -f {args['image']}")

        # Try to delete a transient VM
        name = "transient-VM"
        args = self.createVm(name)
        m.execute(f"virsh undefine {name}")
        b.wait_visible(f"tr[data-row-id=vm-{name}-system][data-vm-transient=true]")
        b.click(f"#vm-{name}-system-action-kebab button")
        b.wait_visible(f"#vm-{name}-system-delete a.pf-m-disabled")
        b.click(f"#vm-{name}-system-forceOff")
        self.waitVmRow(name, 'system', False)
        b.wait_not_present(f'#vm-{name}-system-state button:contains("view more")')

        # Try to delete a VM where storage deletion will fail
        name = "vm-fail-storage-deletion"
        args = self.createVm(name)
        self.waitVmRow(name)
        self.goToVmPage(name)
        wait(lambda: name in m.execute("virsh list --all --name"))
        addDisk(secondDiskVolName, poolName, name)
        # Remove VM's disk from command line
        m.execute(f"rm {args['image']} {(secondDiskPoolPath + secondDiskVolName)}")

        self.performAction(name, "delete")
        b.set_checked(f"#vm-{name}-delete-modal-dialog li:nth-child(1) input[type=checkbox]", True)
        b.set_checked(f"#vm-{name}-delete-modal-dialog li:nth-child(2) input[type=checkbox]", True)
        b.click(f"#vm-{name}-delete-modal-dialog button:contains(Delete)")

        # Check VM got deleted, but there is a warning about unsuccessful storage deletion
        self.waitVmRow(name, present=False)
        wait(lambda: name not in m.execute("virsh list --all --name"))
        b.wait_visible(".pf-c-alert-group li .pf-c-alert")
        b.wait_in_text(".pf-c-alert-group li .pf-c-alert .pf-c-alert__title", f"Could not delete all storage for {name}")
        b.click("button.alert-link.more-button")
        b.wait_in_text(".pf-c-alert-group li .pf-c-alert .pf-c-alert__description", args['image'])
        b.wait_in_text(".pf-c-alert-group li .pf-c-alert .pf-c-alert__description", secondDiskVolName)
        # Close the notification
        b.click(".pf-c-alert-group li .pf-c-alert button.pf-m-plain")

        # Delete a shut-off guest and verify the storage was removed
        name = "vm-shutoff"
        img2 = f"/var/lib/libvirt/images/{name}-2.img"
        self.createVm(name, running=False)
        # Guest disk image exists
        m.execute(f"while ! test -f {img2}; do sleep 1; done")

        self.performAction(name, "delete")

        b.wait_visible(f"#vm-{name}-delete-modal-dialog .disk-source-file:contains({img2})")
        b.wait_visible(f"#vm-{name}-delete-modal-dialog input[name='check-action-vda']:checked")
        b.click(f"#vm-{name}-delete-modal-dialog button:contains(Delete)")
        b.wait_not_present(f"#vm-{name}-delete-modal-dialog")

        self.waitVmRow(name, "system", False)

        # Guest disk image has been deleted
        m.execute(f"while test -f {img2}; do sleep 1; done")

        self.assertNotIn(name, m.execute("virsh list --all --name"))

        # Deleting a running guest will disconnect the serial console
        self.allow_browser_errors("Disconnection timed out.")
        self.allow_journal_messages(".* couldn't shutdown fd: Transport endpoint is not connected")


if __name__ == '__main__':
    test_main()
